// -------------------- Git hub --------------------//
// Git: 로컬에서 쓸 수 있는 파일 버전 관리 프로그램
// Repository: Git의 파일 저장소 .git 폴더 안에 보면 정보 있음.

// Git Hub: 온라인 저장소
// github.com은 기본 브랜치 이름을 main으로 강요하므로 메인브랜치 이름이 master라면 main으로 변경필요

// Push
git push -u [저장소주소] [저장할 브랜치 네임 ex)main] <- 로컬 저장소를 온라인 저장소로 업로드
git remote add [변수명] [주소]                       <- 로컬 주소가 너무 기니깐 변수(변수명은 보통 origin으로 씀)에다가 온라인 저장소 주소 저장 
git push origin main                                <- origin이라는 변수에 저장된 주소로 main branch의 내용을 업로드해라
git push                                            <- -u를 사용했던 경우 이전 온라인 저장소 주소와 브랜치 이름을 기억하고 있음. 때문에 git push 까지만 써도 바로 업로드 가능.


// ------------------ 팀원과 협력하기 --------------------//
// 내 팀: 나, 팀원1
// 팀원1이 코드 협업하고 싶다면?
git clone [저장소주소]  <- 원격 저장소 복제

// 팀원1이 코드를 push하고 싶다면? 
// 1) 팀원1이 github 가입
// 2) 내가 해당 github 페이지로 이동 > Settings > Collaborators > Manage access: Add people > 팀원1 추가 

// 팀원1이 코드 변경하고 push함 -> 그 다음에 나도 push 함.
// 에러남. 왜냐면 내가 갖고 있는 repository version이 최신이 아니기 때문.
// 이럴때, pull 명령어로 먼저 나의 repository를 최신으로 만들고 그 다음에 push 해야 함.
// git pull = git fetch(원격 저장소의 신규 commit을 가져오세요) + git merge
git pull [원격저장소주소] [브랜치명]
git pull                            <- -u 로 저장을 해놨을 경우, [원격저장소주소] [브랜치명] 생략가능


// ------------------- 브랜치 만들기 ---------------------//
// 방법1) github.com에서 만들기
// github 접속 > <>code 탭 > main ▼ > branch 이름 적기 > Create branch [브랜치이름] from main
// 방법2) 로컬에서 만들고 push
// git branch [브랜치명]
// git switch [브랜치명]
// git add .
// git commit -m 'message'
// git push [원격저장소주소] [브랜치명]   <- 새롭게 만들어진 브랜치를 업로드해야하므로

// 내가 짠 코드의 branch를 local에서 main으로 merge하고 push해도 되고, 아니면 push를 한 뒤에 github.com에서 main으로 merge 진행도 가능.
// 보통은 후자를 사용. 왜냐면, 시니어가 코드 리뷰를 한 후에 main으로 merge 하고 싶기 때문.
// 그럼, github.com에서 merge 하는 법?
// github.com 접속 > Pull requests 선택 > New Pull request 선택 > 상단에서 base와 compare 브랜치 선택 > Create pull request
// 위 방법까지 하면, 해당 request안에서 서로 코멘트 달고 하면서 협의 가능. 협의가 끝나면 'Merge pull request' 선택. 만약 conflict가 있다면, 충돌 해결 필요
// 'Resolve conflicts' 선택 > 코드 창에서 코드 수정하고 'Mark as resolved' 선택 > 'Commit merge' > Merge pull request

// ------------------- subtree: Github 한개의 repository에 여러 프로젝트 올리기 -------------------//
< 특정 repo를 다른 repo의 하위로 옮기기 >
1. GitHub 웹사이트에서 부모 레포지토리 생성

2. Git bash 열기: 프로젝트 폴더에서 shift + 우클릭 > Open Git Bash here

3. 부모 레포지토리 복제
$git clone --mirror {부모 repo URL}
$git clone --mirror https://github.com/Narae-H/study-react.git

4. 복제된 부모 레포지토리로 이동
$cd {부모이름}

5. Subtree(자식 레포지토리)생성 - 자식 레포지토리가 github에 있는 경우만 해당. 로컬에 있다면 일반적인 방법으로 git commit/push 하면 됨. 
$git subtree add --prefix={부모 레포지토리에 저장할 폴더명} {자식 repo URL} {부모 원격 branch name}
$git subtree add --prefix=0-overview https://github.com/Narae-H/react-shop.git main

6. 푸시
git push

< 부모 repo에서 클론 --  아직 정확하지 않음 확인필요>
# 서버트리를 pull, push 할 때는 prefix 옵션을 주어서 해당 서브트리가 위치한 디렉토리 정보와
# 저장소, 브랜치를 주어서 pull, push를 수행하도록 한다.

1. origin 변수 생성
git remote add origin {부모 리포지토리 주소}

2. 부모 리포지토리 복제
git clone origin

3. pull/push 
# pull
git subtree pull --prefix {클론할 폴더} {원격 저장소의 이름} {브랜치 이름}
git subtree pull -prefix src/style-core core-upstream main


git subtree pull --prefix={local directory} {repo} {branch}

# push
git subtree push --prefix={local directory} {repo} {branch}

// ------------------- Git 방법론 -------------------//
// 프로젝트가 커지고, 사람이 많아지면 branch, merge 더러워짐
// 그래서 방법론을 씀: gitFlow, github Flow, Trunk-based, Gitlab Flow

// 1. GitFlow by Vincent Driessen
// 아래의 5가지 브랜치를 만들어서 관리. 근데 CI/CD에는 적합하지 않음. 그럴경우 상황에 맞춰서 변형해서 쓰면 됨. ex) relase branch는 안만듬. 바로 develop branch 에서 main으로 merge.
//  1) main    : release branch에서 테스트가 완벽히 끝난 코드를 main으로 옮겨서 출시
//  2) develop : 신규 기능을 추가할 때, 여러 기능들이 여기로 추가됨
//  3) feature : 기능 별로 branch를 나누고 기능 개발이 끝난다면 develop에다가 merge. 여기서의 작명은 feature/[기능이름] ex) feature/guild, feature/friend
//  4) release : develop branch가 다 기능 개발이 끝났다고 해서 바로 main에 합치기에 불안함. 그래서 그 전에 release라는 브랜치 만들어서 여기다가 커밋해서 여러가지 테스트 진행. 
//               테스트가 완료되면 main branch에만 업데이트하는게 아닌 develop에도 업데이트 해줌. 왜냐면 신규 기능 계속 개발중일꺼니깐. 
//  5) hotfix  : 급하게 수정되어야 할 버그를 위한 branch. 다 끝나고 나면 main, develop 에 업데이트

// 2. Trunk-based Branch
// 브랜치 하나만 잘 관리하자. main branch 만 잘 관리하고 새로운 기능이 필요할 때, feature/[기능이름] branch 만들어서 기능 개발하고 바로 다시 main으로 merge.
// main 브랜치를 바로 user에게 배포하므로, 버그/오류가 많을 수 있음. 그러므로 테스트 많이 자주 해야함 -> 테스트 자동화/배포 자동화 필요
// Github Flow랑 유사



// ------------------- 코드 임시보관: git stash -------------------//
// 코드 임시보관용으로 stashfmf 써도 되고, 브랜치 만들어도 상관없음. 
git stash                   <- 방금 수정했던 코드가 임시 공간으로 이동
git stash list              <- 저장된 임시 공간 리스트 봄
git stash save '[comment]'  <- 코멘트 같이 적고 싶을 때문
git stash pop               <- 가장 최근에 보관했던 stash에 있는 코드 다시 불러오고 싶을 때
git stash drop [stash번호]  <- [stash번호] 에 있는 stash 삭제
git stash clar              <- 전부 다 삭제

